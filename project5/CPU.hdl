// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS: // following figure 5.8:
        // set bits for opcode 
        Not(in = instruction[15], out = A);
        Not(in = A,               out = C);

        // take care of writeM 
        And(a = instruction[3], b = C, out = writeM);

        // figure out when to load into A - either we have A inst, or C inst + dest = A
        And(a = C,     b = instruction[05], out = CdstA); 
        Or( a = CdstA, b = A,               out = loadAreg);
        
        Mux16(a = instruction, b = ALUout, sel = CdstA, out = Aregin);
        ARegister(in = Aregin, load = loadAreg, out = Aregout, out[0..14] = addressM);
        
        // use instruction[12] to choose between A and M 
        Mux16(a = Aregout, b = inM, sel = instruction[12], out = ALUy);
        And(a = C, b = instruction[4], out = loadDreg); // C inst + dest = D 
        DRegister(in = ALUout, load = loadDreg, out = Dout);
        
        // select the six computation bits for the ALU 
        ALU(x   = Dout, y = ALUy, 
            zx  = instruction[11], nx = instruction[10], 
            zy  = instruction[09], ny = instruction[08], 
            f   = instruction[07], no = instruction[06], 
            out = ALUout, out = outM, zr = zr, ng = ng);

        // calculate jump bits 
        And(a  = zr,  b = instruction[1], out = jeq);
        And(a  = ng,  b = instruction[2], out = jlt);
        Or( a  = zr,  b = ng,             out = nps);
        Not(in = nps,                     out = pos);
        And(a  = pos, b = instruction[0], out = jgt);
        Or( a  = jeq, b = jlt,            out = jle);
        Or( a  = jle, b = jgt,            out = jmp);

        And(a = jmp, b = C, out = actuallyjump); 

        PC(in         = Aregout, 
           inc        = true, // by default, the program counter must increment unless we're jumping
           load       = actuallyjump, 
           reset      = reset, 
           out[0..14] = pc);
}